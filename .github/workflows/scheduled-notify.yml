name: Scheduled GitHub Notifier

on:
  schedule:
    # 7:00 AM Vietnam - Adjusted for GitHub Actions delay
    - cron: '15 23 * * *'
    # 9:00 PM Vietnam = 14:00 UTC - Evening digest  
    - cron: '0 14 * * *'
    # Every 2 hours for instant checks (cost optimized)
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        default: 'instant'
        type: choice
        options:
        - instant
        - morning
        - evening
        - all

jobs:
  scheduled-notifier:
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Get current date for cache key
      - name: Get date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "Generated date: $(date +'%Y-%m-%d')"
          echo "GitHub run ID: ${{ github.run_id }}"
      
      # Restore cache from previous runs (this prevents duplicate notifications)
      - name: Cache notification state
        uses: actions/cache@v4
        with:
          path: cache.json
          # Use run_id for unique cache per run, but restore from nearest previous version
          key: gh-notify-cache-${{ github.run_id }}
          restore-keys: |
            gh-notify-cache-${{ steps.date.outputs.date }}-
            gh-notify-cache-
      
      # Debug: Show cache key information
      - name: Show cache key information
        run: |
          echo "=== Cache key information ==="
          echo "Primary key: gh-notify-cache-${{ github.run_id }}"
          echo "Restore keys:"
          echo "  - gh-notify-cache-${{ steps.date.outputs.date }}-"
          echo "  - gh-notify-cache-"
          echo "============================="
      
      # Debug: Show cache state after restoration
      - name: Show cache state after restoration
        run: |
          echo "=== Cache state after restoration ==="
          if [ -f cache.json ]; then
            echo "Cache file exists:"
            cat cache.json | jq . || cat cache.json
            echo ""
            echo "Cache file size: $(wc -c < cache.json) bytes"
            echo "Cache file modified: $(stat -c %y cache.json)"
            # Create backup for comparison (excluding timestamps)
            cp cache.json cache.json.original
          else
            echo "No cache file found (fresh start)"
            # Create empty original file for comparison
            echo '{}' > cache.json.original
          fi
          echo "========================================"
       
      - name: Setup Go with cache
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum
         
      - name: Download dependencies
        run: go mod download

      # Determine what type of notification to run
      - name: Determine notification type
        id: determine_type
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            case "${{ github.event.schedule }}" in
              "15 23 * * *")
                echo "type=morning" >> $GITHUB_OUTPUT
                ;;
              "0 14 * * *")
                echo "type=evening" >> $GITHUB_OUTPUT
                ;;
              "0 */2 * * *")
                echo "type=instant" >> $GITHUB_OUTPUT
                ;;
            esac
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.check_type }}" >> $GITHUB_OUTPUT
          else
            echo "type=instant" >> $GITHUB_OUTPUT
          fi
       
      # Run instant checks (scheduled every 2 hours or manual)
      - name: Run instant checks
        if: steps.determine_type.outputs.type == 'instant' || steps.determine_type.outputs.type == 'all'
        run: |
          go build -o gh-notify main.go
          ./gh-notify
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GITHUB_USERNAME: ${{ github.actor }}
          CHECK_TYPE: 'instant'
          CHECK_INTERVAL: '5m'
          CACHE_FILE: 'cache.json'
          TIMEZONE: 'Asia/Ho_Chi_Minh'
          GITHUB_ACTIONS: 'true'
          TRACK_COMMITS_REALTIME: ${{ vars.TRACK_COMMITS_REALTIME || 'false' }}
          COMMIT_LOOKBACK_MINUTES: ${{ vars.COMMIT_LOOKBACK_MINUTES || '120' }}
          TRACKED_REPOSITORIES: ${{ vars.TRACKED_REPOSITORIES || '' }}

      # Run morning digest (scheduled at 7AM Vietnam or manual)
      - name: Run morning digest
        if: steps.determine_type.outputs.type == 'morning' || steps.determine_type.outputs.type == 'all'
        run: |
          go build -o gh-notify main.go
          ./gh-notify
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GITHUB_USERNAME: ${{ github.actor }}
          CHECK_TYPE: 'morning'
          CACHE_FILE: 'cache.json'
          TIMEZONE: 'Asia/Ho_Chi_Minh'
          GITHUB_ACTIONS: 'true'

      # Run evening digest (scheduled at 9PM Vietnam or manual)
      - name: Run evening digest
        if: steps.determine_type.outputs.type == 'evening' || steps.determine_type.outputs.type == 'all'
        run: |
          go build -o gh-notify main.go
          ./gh-notify
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GITHUB_USERNAME: ${{ github.actor }}
          CHECK_TYPE: 'evening'
          CACHE_FILE: 'cache.json'
          TIMEZONE: 'Asia/Ho_Chi_Minh'
          GITHUB_ACTIONS: 'true'

      # Check if cache content actually changed and conditionally save
      - name: Conditional cache save based on content changes
        if: always()
        run: |
          echo "=== Checking for cache content changes ==="
          
          if [ -f cache.json ] && [ -f cache.json.original ]; then
            # Compare cache content (ignoring pure timestamp differences)
            # We'll check if the important content (notifications, PRs, issues) changed
            
            # Extract key content without last_check timestamp for comparison
            if command -v jq > /dev/null; then
              # Use jq to compare without last_check field
              cat cache.json.original | jq 'del(.last_check)' > original_content.json 2>/dev/null || cp cache.json.original original_content.json
              cat cache.json | jq 'del(.last_check)' > current_content.json 2>/dev/null || cp cache.json current_content.json
            else
              # Fallback: copy files as-is if jq not available
              cp cache.json.original original_content.json
              cp cache.json current_content.json
            fi
            
            if cmp -s original_content.json current_content.json; then
              echo "=== NO MEANINGFUL CONTENT CHANGES ==="
              echo "Cache content is essentially the same (only timestamps changed)"
              echo "Removing cache.json to prevent unnecessary cache save"
              rm -f cache.json
              echo "Cache file removed - GitHub Actions will not save a new cache entry"
            else
              echo "=== CONTENT CHANGES DETECTED ==="
              echo "Cache has meaningful changes and will be saved"
              echo "Original content size: $(wc -c < original_content.json) bytes"
              echo "New content size: $(wc -c < current_content.json) bytes"
            fi
            
            # Cleanup temp files
            rm -f original_content.json current_content.json
          elif [ -f cache.json ]; then
            echo "=== NEW CACHE FILE ==="
            echo "Cache file exists but no original to compare - will save new cache"
          else
            echo "=== NO CACHE FILE ==="
            echo "No cache file generated - nothing to save"
          fi
          echo "============================================"

      # Debug: Show final cache state
      - name: Show final cache state
        if: always()
        run: |
          echo "=== Final cache state ==="
          if [ -f cache.json ]; then
            echo "Final cache file (will be saved by GitHub Actions):"
            cat cache.json | jq . || cat cache.json
            echo ""
            echo "Cache file size: $(wc -c < cache.json) bytes"
            echo "Cache file modified: $(stat -c %y cache.json)"
          else
            echo "No cache file found - GitHub Actions will not save cache"
          fi
          echo "=========================="

      # Upload cache as artifact for debugging
      - name: Upload cache artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: notification-cache-${{ github.run_id }}
          path: cache.json
          retention-days: 3
